var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import darkmodejs from '@assortment/darkmodejs';
import { parseCookies, setCookie } from 'nookies';
import React, { useEffect, useState } from 'react';
import { defaultConfig, MODE } from './config';
import { DarkModeContext, useDarkMode } from './darkModeContext';
export default (function (App, config) {
    var _a = __assign(__assign({}, defaultConfig), config), autoModeCookieName = _a.autoModeCookieName, cookieOptions = _a.cookieOptions, darkModeCookieName = _a.darkModeCookieName, defaultMode = _a.defaultMode;
    function DarkMode(_a) {
        var autoMode = _a.autoMode, darkMode = _a.darkMode, initialProps = _a.initialProps, props = __rest(_a, ["autoMode", "darkMode", "initialProps"]);
        var _b = useState({
            autoModeActive: !!autoMode,
            autoModeSupported: false,
            browserMode: defaultMode,
            darkModeActive: !!darkMode,
            switchToAutoMode: function () {
                setState(function (state) {
                    if (state.autoModeSupported) {
                        setCookie(null, autoModeCookieName, '1', cookieOptions);
                        var darkModeActive = state.browserMode === MODE.DARK;
                        setCookie(null, darkModeCookieName, darkModeActive ? '1' : '0', cookieOptions);
                        return __assign(__assign({}, state), { autoModeActive: true, darkModeActive: darkModeActive });
                    }
                    return __assign({}, state);
                });
            },
            switchToDarkMode: function () {
                setState(function (state) { return (__assign(__assign({}, state), { autoModeActive: false, darkModeActive: true })); });
                setCookie(null, autoModeCookieName, '0', cookieOptions);
                setCookie(null, darkModeCookieName, '1', cookieOptions);
            },
            switchToLightMode: function () {
                setState(function (state) { return (__assign(__assign({}, state), { autoModeActive: false, darkModeActive: false })); });
                setCookie(null, autoModeCookieName, '0', cookieOptions);
                setCookie(null, darkModeCookieName, '0', cookieOptions);
            },
        }), state = _b[0], setState = _b[1];
        useEffect(function () {
            var removeListeners = darkmodejs({
                onChange: function (activeTheme, themes) {
                    switch (activeTheme) {
                        case themes.DARK:
                            setState(function (state) {
                                if (state.autoModeSupported) {
                                    setCookie(null, darkModeCookieName, '1', cookieOptions);
                                    return __assign(__assign({}, state), { browserMode: MODE.DARK, darkModeActive: true });
                                }
                                else {
                                    if (state.autoModeActive)
                                        setCookie(null, darkModeCookieName, '1', cookieOptions);
                                    return __assign(__assign({}, state), { autoModeSupported: true, browserMode: MODE.DARK, darkModeActive: state.autoModeActive ? true : state.darkModeActive });
                                }
                            });
                            break;
                        case themes.LIGHT:
                            setState(function (state) {
                                if (state.autoModeSupported) {
                                    setCookie(null, darkModeCookieName, '0', cookieOptions);
                                    return __assign(__assign({}, state), { browserMode: MODE.LIGHT, darkModeActive: false });
                                }
                                else {
                                    if (state.autoModeActive)
                                        setCookie(null, darkModeCookieName, '0', cookieOptions);
                                    return __assign(__assign({}, state), { autoModeSupported: true, browserMode: MODE.LIGHT, darkModeActive: state.autoModeActive ? false : state.darkModeActive });
                                }
                            });
                            break;
                        case themes.NO_PREF:
                        case themes.NO_SUPP:
                            setCookie(null, autoModeCookieName, '0', cookieOptions);
                            setState(function (state) { return (__assign(__assign({}, state), { autoModeSupported: false })); });
                            break;
                    }
                },
            }).removeListeners;
            return removeListeners;
        }, []);
        var app = React.createElement(App, __assign({ darkMode: state }, props, initialProps));
        return React.createElement(DarkModeContext.Provider, { value: state }, app);
    }
    DarkMode.getInitialProps = function (appContext) { return __awaiter(void 0, void 0, void 0, function () {
        var initialProps, _a, cookies, autoModeCookie, darkModeCookie, autoMode, darkMode, autoModeString, darkModeString;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!App.getInitialProps) return [3 /*break*/, 2];
                    return [4 /*yield*/, App.getInitialProps(appContext)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _a = {};
                    _b.label = 3;
                case 3:
                    initialProps = _a;
                    if (typeof window === 'undefined') {
                        cookies = parseCookies(appContext.ctx);
                        autoModeCookie = cookies[autoModeCookieName];
                        darkModeCookie = cookies[darkModeCookieName];
                        autoMode = typeof autoModeCookie === 'undefined' ? true : autoModeCookie === '1';
                        darkMode = typeof darkModeCookie === 'undefined' ? defaultMode === MODE.DARK : darkModeCookie === '1';
                        autoModeString = autoMode ? '1' : '0';
                        darkModeString = darkMode ? '1' : '0';
                        if (autoModeString !== autoModeCookie)
                            setCookie(appContext.ctx, autoModeCookieName, autoModeString, cookieOptions);
                        if (darkModeString !== darkModeCookie)
                            setCookie(appContext.ctx, darkModeCookieName, darkModeString, cookieOptions);
                        return [2 /*return*/, { autoMode: autoMode, darkMode: darkMode, initialProps: initialProps }];
                    }
                    return [2 /*return*/, { initialProps: initialProps }];
            }
        });
    }); };
    DarkMode.displayName = "withDarkMode(" + (App.displayName || App.name || 'App') + ")";
    return DarkMode;
});
export { MODE, useDarkMode };
//# sourceMappingURL=index.js.map